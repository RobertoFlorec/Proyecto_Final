/*
 * Copyright (c) 2016, NXP Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * @file    Final.c
 * @brief   Application entry point.
 */
#include <stdio.h>
#include "MK64F12.h"
#include "ACELEROMETRO.h"
#include "GlobalFunctions.h"
#include "FlexTimer.h"
#include "PWM.h"
#include "PID.h"

int main(void) {

	uint8 Y;/*! Actual value of accelerometer*/
	uint8 counter = 0;/*! Increases as the array saves values coming form accelerometer for later average*/
	uint16 value = 0; /*! Saves the addition of the array members*/
	uint8 arreglo[20]; /*! Array to save 20 values coming from the accelerometer for later average*/
	acelerometroInit();/*! Initialization on ADC to obtain accelerometer data*/
	uint32 PID_output;/*! Variable to keep the data coming from the PID*/
	uint32 PID_prev_output = 0;/*! Saves the previous value form PID*/
	uint32 PID_temp_output = 0;
	sint16 dutyCycle = 106;/*! Define dutyCycle to agree with the initial PWM value*/
	PWM_init();/*! Configuration function for FlexTimer as PWM and respective GPIO setup*/

    while(1) {

    	PID_output = PID();/*! Obtain PID output value*/
		if((0 <= PID_output) && (26 >= PID_output)){
				if(PID_prev_output < PID_output){
					PID_temp_output = PID_output - PID_prev_output;/*!*/
					dutyCycle += PID_temp_output * DEFINED_PERCENTAJE_PER_UNIT;/*! Increase dutyCycle PID_OUTPUT * DEFINED_PERCENTAJE*/
					if(255 < dutyCycle){
						dutyCycle = 255;
					}
					FlexTimer_updateCHValue(dutyCycle, FTM_0, CHANNEL_6);/*!*/
					PID_prev_output = PID_output;
				}
				else if (PID_prev_output > PID_output){
					PID_temp_output = PID_prev_output - PID_output;/*!*/
					dutyCycle -= PID_temp_output * DEFINED_PERCENTAJE_PER_UNIT;/*! Increase dutyCycle PID_OUTPUT * DEFINED_PERCENTAJE*/
					if(106 > dutyCycle){
						dutyCycle = 106;
					}
					FlexTimer_updateCHValue(dutyCycle, FTM_0, CHANNEL_6);/*!*/
					PID_prev_output = PID_output;
				}
		}
		else if((232 <= PID_output) && (255 >= PID_output)){
			if(PID_prev_output < PID_output){
				PID_output = 256 - PID_output;
				PID_temp_output = PID_output - PID_prev_output;/*!*/
				dutyCycle -= PID_temp_output * DEFINED_PERCENTAJE_PER_UNIT;/*! Increase dutyCycle PID_OUTPUT * DEFINED_PERCENTAJE*/
				if(66 < dutyCycle){
					dutyCycle = 66;/*! equivalente a cero*/
				}
				FlexTimer_updateCHValue(dutyCycle, FTM_0, CHANNEL_6);/*!*/
				PID_prev_output = PID_output;
			}
			else if (PID_prev_output > PID_output){
				PID_output = 256 - PID_output;
				PID_temp_output = PID_prev_output - PID_output;/*!*/
				dutyCycle += PID_temp_output * DEFINED_PERCENTAJE_PER_UNIT;/*! Increase dutyCycle PID_OUTPUT * DEFINED_PERCENTAJE*/
				if(106 > dutyCycle){
					dutyCycle = 106;
				}
				FlexTimer_updateCHValue(dutyCycle, FTM_0, CHANNEL_6);/*!*/
				PID_prev_output = PID_output;
			}
		}
    	delay(100000);
    }
    return 0 ;
}
