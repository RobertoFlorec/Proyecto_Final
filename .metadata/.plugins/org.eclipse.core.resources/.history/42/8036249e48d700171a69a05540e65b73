/*
 * Copyright (c) 2016, NXP Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * @file    Final.c
 * @brief   Application entry point.
 */
#include <stdio.h>
#include "MK64F12.h"
#include "ACELEROMETRO.h"
#include "GlobalFunctions.h"
#include "FlexTimer.h"
#include "PWM.h"

int main(void) {

	uint8 Y;
	uint8 counter = 0;
	uint8 value = 0;
	uint8 arreglo[10];
	acelerometroInit();

	sint16 dutyCycle = 219;
	uint8 inputValueA = 0,inputPortC = 0;
	GPIO_pinControlRegisterType	pinControlRegisterPORTA = GPIO_MUX1|GPIO_PE|GPIO_PS;
	GPIO_pinControlRegisterType	pinControlRegisterPORTC6 = GPIO_MUX1|GPIO_PE|GPIO_PS;
	/**Clock gating for port A and C*/
	SIM->SCGC5 |= GPIO_CLOCK_GATING_PORTA|GPIO_CLOCK_GATING_PORTC;
	PORTA->PCR[1]   = PORT_PCR_MUX(0x3);
	/**Pin control register configuration for GPIO*/
	PORTA->PCR[BIT4] = pinControlRegisterPORTA;
	PORTC->PCR[BIT6] = pinControlRegisterPORTC6;
	/**Pin 4 and pin 6 of port A and C, respectively as inputs*/
	GPIOA->PDDR &= ~(BIT4);
	GPIOC->PDDR &= ~(BIT6);
	/**Configuration function for FlexTimer*/
	PWM_init();

    while(1) {
    	Y = getValue_Y();
    	arreglo[counter] = Y;
    	counter++;
    	if(counter >= 10){
    		while(counter > 0){
    			value += arreglo[counter];
    			counter--;
    		}
    		value /= 10;
    	printf("\nAcelerometro: %d", value);
    	}

    	/*********************************************************************************/

    	/**Reading the input values for port A and C*/
    			inputPortC = GPIOC->PDIR;
    			inputPortC &=(0x40);
    			inputPortC = inputPortC >> 6;
    			inputValueA = GPIOA->PDIR;
    			inputValueA &=(0x10);
    			inputValueA = inputValueA >> 4;


    			if(inputValueA ==0)
    			{
    				dutyCycle=dutyCycle+9;
    				if(dutyCycle > 255){
    					dutyCycle = 255;
    				}
    				printf("\ndutyCycle: %d", dutyCycle);
    				FlexTimer_updateCHValue(dutyCycle, FTM_0, CHANNEL_6);
    				delay(20000);
    			}
    			if(inputPortC==0)
    			{
    				dutyCycle = dutyCycle-9;
    				if(dutyCycle < 66){
    					dutyCycle = 66;
    				}
    				printf("\ndutyCycle: %d", dutyCycle);
    				FlexTimer_updateCHValue(dutyCycle, FTM_0, CHANNEL_6);
    				delay(20000);
    			}



    	/*********************************************************************************/
//				delay(50000);

    }
    return 0 ;
}
