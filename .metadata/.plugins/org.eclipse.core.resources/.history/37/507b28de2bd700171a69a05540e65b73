/**
	\file
	\brief
		This is the header file for the FlexTimer divice driver.
	\author J. Luis Pizano Escalante, luispizano@iteso.mx
	\date	7/09/2014
	\todo
	    Add configuration structures.
 */

#ifndef FLEXTIMER_H_
#define FLEXTIMER_H_


#include "MK64F12.h"
#include "DataTypeDefinitions.h"


#define FLEX_TIMER_0_CLOCK_GATING 0x01000000
#define FLEX_TIMER_1_CLOCK_GATING 0x02000000
#define FLEX_TIMER_2_CLOCK_GATING 0x04000000
#define FLEX_TIMER_3_CLOCK_GATING 0x02000000

typedef enum{
	FTM_0,
	FTM_1,
	FTM_2,
	FTM_3
}FTM_ChannelType;

typedef enum{
	WPDIS_ENABLE,
	WPDIS_DISABLE
}WPDIS_selectType;

typedef struct{
	FTM_ChannelType FTM_0;
	WPDIS_selectType WPDIS_DISABLE;
}FTM_ConfigType;

typedef enum {
	BITMODE_8_9,
	BITMODE_12_13,
	BITMODE_10_11,
	BITMODE_16_16
}ADC_ConversionModes;


typedef enum {
	DADP0,
	DADP1,
	DADP2,
	AD4,AD5,AD6,AD7,AD8,AD9,AD10, AD11, AD12, AD13, AD14, AD15, AD16, AD17,
	AD18, AD19, AD20, AD21, AD22, AD23,
	RESERVED,
	RESERVED2,
	RESERVED3,
	TEMP_SENSOR,
	BANDGAP,
	VREFSH,
	VREFSL,
	DISABLE
}ADC_InputChannels;


typedef enum {
	SAMPLES_4,
	SAMPLES_8,
	SAMPLES_16,
	SAMPLES_32
}ADC_SampleSizes;


typedef enum {
	AVERAGE_DISABLE,
	AVERAGE_ENABLE
}ADC_AverageEnables;


typedef enum {
	INTERRUPT_DISABLE,
	INTERRUPT_ENABLE
}ADC_InterruptEnables;


typedef struct {
	ADC_ChannelType ADC_Channel;
	ADC_ConversionModes ADC_Bitmode;
	ADC_InputChannels ADC_InputCh;
	ADC_SampleSizes ADC_SampleSz;
	ADC_AverageEnables ADC_AvgEn;
	ADC_InterruptEnables ADC_IRQEn;
}ADC_ConfigType;


#define FLEX_TIMER_FAULTIE  0x80
#define FLEX_TIMER_FAULTM_0   0x00
#define FLEX_TIMER_FAULTM_1   0x20
#define FLEX_TIMER_FAULTM_2   0x40
#define FLEX_TIMER_FAULTM_3   0x60
#define FLEX_TIMER_CAPTEST  0x10
#define FLEX_TIMER_PWMSYNC  0x08
#define FLEX_TIMER_WPDIS    0x04
#define FLEX_TIMER_INIT     0x02
#define FLEX_TIMER_FTMEN    0x01

#define FLEX_TIMER_TOF     0x80
#define FLEX_TIMER_TOIE    0x40
#define FLEX_TIMER_CPWMS   0x20
#define FLEX_TIMER_CLKS_0  0x00
#define FLEX_TIMER_CLKS_1  0x08
#define FLEX_TIMER_CLKS_2  0x10
#define FLEX_TIMER_CLKS_3  0x18
#define FLEX_TIMER_PS_1    0x00
#define FLEX_TIMER_PS_2    0x01
#define FLEX_TIMER_PS_4    0x02
#define FLEX_TIMER_PS_8    0x03
#define FLEX_TIMER_PS_16    0x04
#define FLEX_TIMER_PS_32    0x05
#define FLEX_TIMER_PS_64    0x06
#define FLEX_TIMER_PS_128    0x07

#define FLEX_TIMER_PWMLOAD_CH0 0x01
#define FLEX_TIMER_PWMLOAD_CH1 0x02
#define FLEX_TIMER_PWMLOAD_CH2 0x04
#define FLEX_TIMER_PWMLOAD_CH3 0x08
#define FLEX_TIMER_PWMLOAD_CH4 0x10
#define FLEX_TIMER_PWMLOAD_CH5 0x20
#define FLEX_TIMER_PWMLOAD_CH6 0x40
#define FLEX_TIMER_PWMLOAD_CH7 0x80
#define FLEX_TIMER_LDOK        0x200


#define  FLEX_TIMER_DMA   0x01
#define  FLEX_TIMER_ELSA  0x04
#define  FLEX_TIMER_ELSB  0x08
#define  FLEX_TIMER_MSA   0x10
#define  FLEX_TIMER_MSB   0x20
#define  FLEX_TIMER_CHIE  0x40
#define  FLEX_TIMER_CHF   0x80


void FlexTimer_clockGating(FTM_ChannelType Channel);
void FlexTimerWPDIS(WPDIS_selectType select);
void FlexTimer_updateCHValue(sint16 channelValue);

void FlexTimer_Init();


#endif /* FLEXTIMER_H_ */
